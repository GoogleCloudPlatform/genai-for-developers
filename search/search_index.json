{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GenAI for Dev","text":"<ul> <li>Tutorials</li> </ul>"},{"location":"contributing/architectural-decisions/prompting/","title":"Prompt Engineering","text":"Field Description Date 26<sup>th</sup> May 2024 Status Proposed Context Decide on the best structure to use for the prompts in <code>devai</code> to make them more robust and meet best practices to provide the most useful responses. Decision 4 core sections (Instructions, Context, Output format and Example Dialogue [OPTIONAL]) Rationale It seemed the simplest structure based on many examples and best practices guides. Consequences A consistent approach to creating prompts to be used for existing and new features in <code>devai</code> which should simplify creation and troubleshooting. The prompts will need to be reviewed as more is learnt about prompt engineering and the LLM's evolve. Participants robedwards@ References https://ai.google.dev/gemini-api/docs/prompting-strategies, https://cloud.google.com/vertex-ai/docs/generative-ai/learn/introduction-prompt-design, https://ai.google.dev/gemini-api/docs/prompting-strategies, https://developers.google.com/machine-learning/resources/prompt-eng, https://cloud.google.com/blog/products/application-development/five-best-practices-for-prompt-engineering Notes N/A <p>Prompt engineering is the method of creating and refining input text or instructions, known as prompts, to effectively communicate with and guide AI models, particularly large language models (LLMs), to generate desired responses. It involves understanding the model's strengths and weaknesses, providing clear and specific instructions, utilizing contextual information, and iterating through different prompt variations to achieve optimal results.</p>"},{"location":"contributing/architectural-decisions/prompting/#prompt-engineering-is-crucial-for-several-reasons","title":"Prompt engineering is crucial for several reasons:","text":"<ul> <li>It improves the performance of AI models by providing clear instructions and context, leading to more accurate and relevant outputs.</li> <li>It helps reduce biases and harmful responses by carefully controlling the input and guiding the AI's focus.</li> <li>It increases control and predictability over the AI's behavior, ensuring consistent and desired outcomes.</li> <li>It enhances the user experience by making interactions with AI models more intuitive and satisfying.</li> </ul>"},{"location":"contributing/architectural-decisions/prompting/#best-practices-for-prompt-engineering","title":"Best Practices for Prompt Engineering","text":"<ul> <li>Understand the Model: Know the model's strengths, weaknesses, and limitations to craft effective prompts and avoid errors.</li> <li>Be Specific: Tailor prompts to your desired outcome, providing clear instructions and avoiding ambiguity.</li> <li>Use Context: Include relevant information, examples, or personas in prompts to help the model understand your request better.</li> <li>Provide Examples: Give the model examples of desired input-output pairs to guide its responses.</li> <li>Experiment and Iterate: Try different prompt variations, keywords, and structures to discover what works best.</li> <li>Chain-of-Thought Prompting: Break down complex problems into smaller steps and prompt the model to provide reasoning for each step.</li> </ul>"},{"location":"contributing/architectural-decisions/prompting/#prompt-structure-for-devai","title":"Prompt Structure for <code>devai</code>","text":"<p>The prompt structure to be used for <code>devai</code> is  </p>"},{"location":"contributing/architectural-decisions/prompting/#instruction","title":"Instruction ###","text":"<p>Clearly state the task, such as \"Review the following code for potential errors and optimizations.\"</p>"},{"location":"contributing/architectural-decisions/prompting/#context-code","title":"Context (code) ###","text":"<p>Code snippet or file to be reviewed passed.</p>"},{"location":"contributing/architectural-decisions/prompting/#output-format","title":"Output Format ###","text":"<p>Specify the type of feedback expected, e.g., \"List potential errors, suggest optimizations, and provide an overall assessment.\"</p>"},{"location":"contributing/architectural-decisions/prompting/#example-prompts-for-application-development","title":"Example Prompts for Application Development","text":"<ul> <li>Text Summarization: \"Summarize the main points of this article in three sentences.\"</li> <li>Code Generation: \"Write a Python function to calculate the factorial of a number.\"</li> <li>Image Generation: \"Generate an image of a cat sitting on a chair.\"</li> <li>Translation: \"Translate the following English text to French: 'Hello, how are you?'\"</li> <li>Question Answering: \"What are the benefits of using renewable energy sources?\"</li> </ul>"},{"location":"contributing/architectural-decisions/prompting/#code-review-example","title":"Code Review Example","text":"<p>Here's an example prompt designed for code review, incorporating persona, task, context, and format:</p> <p>Persona: You are a senior software engineer with expertise in Python and a deep understanding of clean code principles. You are meticulous, detail-oriented, and have a knack for identifying potential issues and optimizations in code.</p> <p>Task: Thoroughly review the provided Python code snippet for the following:</p> <ul> <li>Correctness: Ensure the code functions as intended, without errors or unexpected behavior.</li> <li>Efficiency: Identify potential performance bottlenecks or areas where the code could be optimized for speed or resource usage.</li> <li>Readability: Assess the code's clarity and adherence to best practices, suggesting improvements to make it more maintainable.</li> <li>Security: Look for potential vulnerabilities or weaknesses that could be exploited.</li> </ul> <p>Context:</p> <p>Python <pre><code>def calculate_discount(price, discount_percentage):\n    if discount_percentage &lt; 0 or discount_percentage &gt; 100:\n        raise ValueError(\"Discount percentage must be between 0 and 100\")\n    discount_amount = price * (discount_percentage / 100)\n    discounted_price = price - discount_amount\n    return discounted_price\n</code></pre></p> <p>Format:</p> <p>Provide your feedback in the following structured format:</p> <ul> <li>Overall Assessment: A brief summary of your overall impression of the code's quality.</li> <li>Potential Issues: A list of any errors, bugs, or potential problems you identified.</li> <li>Optimization Suggestions: Specific recommendations for improving the code's efficiency or performance.</li> <li>Readability Enhancements: Suggestions for improving the code's clarity, structure, or adherence to best practices.</li> <li>Security Concerns: Any potential security risks or vulnerabilities you found.</li> </ul>"},{"location":"contributing/architectural-decisions/prompting/#template-with-example","title":"Template with example","text":"<pre><code>### Instruction ###\nYou are a senior software engineer and architect with over 20 years of experience, specializing in the language of the provided code snippet and adhering to clean code principles. You are meticulous, detail-oriented, and possess a deep understanding of software design and best practices.\n\nYour task is to perform a comprehensive code review of the provided code snippet. Evaluate the code with a focus on the following key areas:\n\nCorrectness: Ensure the code functions as intended, is free of errors, and handles edge cases gracefully.\nEfficiency: Identify performance bottlenecks, redundant operations, or areas where algorithms and data structures could be optimized for improved speed and resource utilization.\nMaintainability: Assess the code's readability, modularity, and adherence to coding style guidelines and conventions. Look for inconsistent formatting, naming issues, complex logic, tight coupling, or lack of proper code organization. Suggest improvements to enhance clarity and maintainability.\nSecurity: Scrutinize the code for potential vulnerabilities, such as improper input validation, susceptibility to injection attacks, or weaknesses in data handling.\nBest Practices: Verify adherence to established coding standards, design patterns, and industry-recommended practices that promote long-term code health.\n\n\n### Example Dialogue ###\n&lt;query&gt; First questions are to detect violations of coding style guidelines and conventions. Identify inconsistent formatting, naming conventions, indentation, comment placement, and other style-related issues. Provide suggestions or automatically fix the detected violations to maintain a consistent and readable codebase if this is a problem.\n        import \"fmt\"\n\n        func main() {\n            name := \"Alice\"\n            greeting := fmt.Sprintf(\"Hello, %s!\", name)\n            fmt.Println(greeting)\n        }\n\n\n        &lt;response&gt; [\n            {\n                \"question\": \"Indentation\",\n                \"answer\": \"yes\",\n                \"description\": \"Code is consistently indented with spaces (as recommended by Effective Go)\"\n            },\n            {\n                \"question\": \"Variable Naming\",\n                \"answer\": \"yes\",\n                \"description\": \"Variables (\"name\", \"greeting\") use camelCase as recommended\"\n            },\n            {\n                \"question\": \"Line Length\",\n                \"answer\": \"yes\",\n                \"description\": \"Lines are within reasonable limits\" \n            },\n            {\n                \"question\": \"Package Comments\", \n                \"answer\": \"n/a\",\n                \"description\": \"This code snippet is too small for a package-level comment\"\n            }\n        ]\n\n\n        &lt;query&gt; Identify common issues such as code smells, anti-patterns, potential bugs, performance bottlenecks, and security vulnerabilities. Offer actionable recommendations to address these issues and improve the overall quality of the code.\n\n        \"package main\n\n        import (\n            \"fmt\"\n            \"math/rand\"\n            \"time\"\n        )\n\n        // Global variable, potentially unnecessary \n        var globalCounter int = 0 \n\n        func main() {\n            items := []string{\"apple\", \"banana\", \"orange\"}\n\n            // Very inefficient loop with nested loop for a simple search\n            for _, item := range items {\n                for _, search := range items {\n                    if item == search {\n                        fmt.Println(\"Found:\", item)\n                    }\n                }\n            }\n\n            // Sleep without clear reason, potential performance bottleneck\n            time.Sleep(5 * time.Second) \n\n            calculateAndPrint(10)\n        }\n\n        // Potential divide-by-zero risk\n        func calculateAndPrint(input int) {\n            result := 100 / input \n            fmt.Println(result)\n        }\"\n\n        &lt;response&gt; [\n            {\n                \"question\": \"Global Variables\",\n                \"answer\": \"no\",\n                \"description\": \"Potential issue: Unnecessary use of the global variable 'globalCounter'. Consider passing values as arguments for better encapsulation.\" \n            },\n            {\n                \"question\": \"Algorithm Efficiency\",\n                \"answer\": \"no\",\n                \"description\": \"Highly inefficient search algorithm with an O(n^2) complexity. Consider using a map or a linear search for better performance, especially for larger datasets.\"\n            },\n            {\n                \"question\": \"Performance Bottlenecks\",\n                \"answer\": \"no\",\n                \"description\": \"'time.Sleep' without justification introduces a potential performance slowdown. Remove it if the delay is unnecessary or provide context for its use.\"\n            },\n            {\n                \"question\": \"Potential Bugs\",\n                \"answer\": \"no\",\n                \"description\": \"'calculateAndPrint' function has a divide-by-zero risk. Implement a check to prevent division by zero and handle the error appropriately.\"\n            },\n            { \n                \"question\": \"Code Readability\",\n                \"answer\": \"no\",\n                \"description\": \"Lack of comments hinders maintainability. Add comments to explain the purpose of functions and blocks of code.\"\n            } \n        ]\n\n\n### Context (code) ###\n\n### Output Format ###\nProvide your feedback in a structured JSON array that follows common standards, with each element containing the following fields:\n\nClass/Method (Optional): The name of the class or method where the issue is found (if applicable).\nQuestion: A concise description of the issue or aspect being evaluated (e.g., \"Potential Performance Bottleneck,\" \"Readability Concern,\" \"Security Vulnerability\").\nAnswer: Indicate whether the code is acceptable (\"yes\"), has issues or recommendations (\"no\"), or is not applicable (\"n/a\").\nDescription: Provide a detailed explanation of the issue, including specific recommendations for improvement, potential risks, or the rationale behind your assessment. Include code examples or snippets to illustrate your suggestions where appropriate.\n\nPrioritize your findings based on their severity or potential impact (e.g., critical, high, medium, low).\nIf no major issues are found, state: \"No major issues found. The code appears well-structured and adheres to good practices.\"\nFrame your feedback as constructive suggestions or open-ended questions to foster collaboration and avoid a purely critical tone. Example: \"Could we explore an alternative algorithm here to potentially improve performance?\"\n</code></pre>"},{"location":"tutorials/","title":"GenAI For Developers - Tutorials","text":"<ul> <li>Code Review in CICD with GitHub</li> </ul>"},{"location":"tutorials/setup-jira/","title":"Setup jira","text":"<p>Use your personal account to create/view JIRA projects.</p> <p>Review your existing JIRA projects: https://admin.atlassian.com/</p> <p>Create a new JIRA project using your personal account.</p> <p>Go to https://team.atlassian.com/your-work and click and then select . After that select \"JIRA Software\" - \"Try it now\". Follow the prompts to complete project/site creation.</p> <p>Select JIRA Software.</p> <p>Create a new project.</p> <p>Atlassian API token Create or use an existing Atlassian API token to log in to the CLI.</p> <p>The CLI uses your token when running commands.</p> <p>Go to https://id.atlassian.com/manage/api-tokens. Click Create API token. Enter a label to describe your API token. For example, forge-api-token. Click Create. Click Copy to clipboard and close the dialog.</p>"},{"location":"tutorials/setup-slack/","title":"Setup slack","text":"<p>Create new Slack app at https://api.slack.com/apps</p>"},{"location":"tutorials/code-review-cicd-github/","title":"CICD Code Review with GitHub","text":"<p>This tutorial utilizes Gemini to assist with code reviews within the CICD process. An example integration and workflow are included to demonstrate the capabilities and bootstrap your effort. Additional modifications and customizations can be made by providing your own prompts as well as extending the provided CLI tool.</p> <p>In this tutorial you will:</p> <ul> <li>Configure GCP for access to Gemini APIs</li> <li>Configure GitHub to integrate with GCP</li> <li>Review GitHub workflow and Gemini API calls</li> <li>Execute a CICD job and Review GenAI output</li> </ul>"},{"location":"tutorials/code-review-cicd-github/#get-started","title":"Get Started","text":"<ul> <li>Open the google cloud console</li> <li>Activate Cloud Shell</li> </ul>"},{"location":"tutorials/code-review-cicd-github/#configure-gcp-for-access-to-gemini-apis","title":"Configure GCP for access to Gemini APIs","text":"<p>The following steps prepare your Google Cloud project to enable and access Gemini API through Vertex.</p>"},{"location":"tutorials/code-review-cicd-github/#enable-apis","title":"Enable APIs","text":"<p>In the opened terminal, enable required services to use Vertex AI APIs and Gemini chat.</p> <pre><code>gcloud services enable \\\n    aiplatform.googleapis.com \\\n    cloudaicompanion.googleapis.com \\\n    cloudresourcemanager.googleapis.com\n</code></pre>"},{"location":"tutorials/code-review-cicd-github/#create-service-account-in-gcp","title":"Create Service Account in GCP","text":"<p>Run following commands to create a new service account and download the keys to your workspace.</p> <p>You will use this service account to make API calls to Vertex AI Gemini API from CICD pipelines.</p> <pre><code>PROJECT_ID=$(gcloud config get-value project)\nSERVICE_ACCOUNT_NAME='vertex-client'\nDISPLAY_NAME='Vertex Client'\nKEY_FILE_NAME='vertex-client-key'\n\ngcloud iam service-accounts create $SERVICE_ACCOUNT_NAME --display-name \"$DISPLAY_NAME\"\n\ngcloud projects add-iam-policy-binding $PROJECT_ID --member=\"serviceAccount:$SERVICE_ACCOUNT_NAME@$PROJECT_ID.iam.gserviceaccount.com\" --role=\"roles/aiplatform.admin\" --condition None\n\ngcloud iam service-accounts keys create $KEY_FILE_NAME.json --iam-account=$SERVICE_ACCOUNT_NAME@$PROJECT_ID.iam.gserviceaccount.com\n</code></pre> <p>If prompted to authorize, click \"Authorize\" to continue.</p>"},{"location":"tutorials/code-review-cicd-github/#configure-github-to-integrate-with-gcp","title":"Configure GitHub to integrate with GCP","text":""},{"location":"tutorials/code-review-cicd-github/#fork-the-repo","title":"Fork the Repo","text":"<p>This tutorial uses a sample repository to demostrate the features. Start by forking the repo for your own use. </p> <ul> <li>Fork GitHub repo</li> <li>Select your github userid as an owner.</li> <li>Uncheck option to copy only the \"main\" branch.</li> <li>Click \"Create fork\".</li> </ul>"},{"location":"tutorials/code-review-cicd-github/#enable-github-actions","title":"Enable GitHub Actions","text":"<p>A GitHub workflow is provided in the repo, however you will need to enable GitHub actions in your forked repo in order to run the process.</p> <ul> <li>Open the forked repo in the browser</li> <li>Switch to the \"Actions\" tab</li> <li>Enable GitHub workflows</li> </ul>"},{"location":"tutorials/code-review-cicd-github/#make-gcp-secret-available-to-your-workflow","title":"Make GCP secret available to your workflow","text":"<p>In this step you will create a repository secret to hold the GCP API credentials and make them available to Actions within this repo.</p> <ul> <li>In your GCP terminal run the following command to view the GCP secret created earlier.</li> </ul> <pre><code>cat ~/vertex-client-key.json\n</code></pre> <ul> <li> <p>Copy the secret output to your clipboard. You'll paste it in the following steps</p> </li> <li> <p>In GitHub, navigate to \"Settings -&gt; Secrets and variables -&gt; Actions\" in the GitHub repository.</p> </li> <li>Add Repository secret called \"GOOGLE_API_CREDENTIALS\"</li> <li>Paste the secret you copied earlier into the value field for the secret.</li> <li>Click Add Secret</li> </ul>"},{"location":"tutorials/code-review-cicd-github/#configure-local-git","title":"Configure local git","text":"<p>The steps in this section assume you have not previously configured git in your workspace, which is often the case for lab enviroments and first time CloudShell uses. If your local git client is already configured you can skip this section.</p> <p>In your GCP terminal set the Git user name and email. Update the values before running the commands.</p> <pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"your_email@example.com\"\n</code></pre> <p>Now configure your git client to access your repo by generating an SSH key and adding it to your GitHub account.</p> <p>Update your email before running the following command</p> <p><code>ssh-keygen -t ed25519 -C \"your-email-address\"</code></p> <p>Add the key to your auth agent with the following commands. Do not enter passphrase and hit enter multiple times to complete key generation.</p> <pre><code>eval \"$(ssh-agent -s)\"\nssh-add ~/.ssh/id_ed25519\ncat ~/.ssh/id_ed25519.pub\n</code></pre> <p>Add generated public key to your GitHub account.</p> <ul> <li>Open https://github.com/settings/keys </li> <li>Click \"New SSH key\".</li> <li>Provide a name such as \"qwiklabs-key\"</li> <li>Copy &amp; paste the output from the last command</li> </ul>"},{"location":"tutorials/code-review-cicd-github/#clone-the-repository-locally","title":"Clone the repository locally","text":"<p>With your local git client configured, you can clone the forked repo locally.</p> <p>Be sure to replace your user ID in the next command.</p> <pre><code>git clone git@github.com:YOUR-USERID/genai-for-developers.git\n</code></pre> <p>Change into the directory before continuing with the rest of the tutorial.</p> <pre><code>cd genai-for-developers\n</code></pre>"},{"location":"tutorials/code-review-cicd-github/#review-github-workflow-and-gemini-api-calls","title":"Review GitHub workflow and Gemini API calls","text":""},{"location":"tutorials/code-review-cicd-github/#review-and-the-gemini-api-calls","title":"Review and the Gemini API calls","text":"<p>Inspect the key lines of the CLI that is used in the workflow to understand how it functions.</p> <p>In cloudshell your can open the specific file with the following command.</p> <pre><code>cloudshell edit devai-cli/src/devai/commands/review.py \n</code></pre> <p>Review the prompt used in the <code>code</code> function. The function begins with</p> <pre><code>@click.command(name='code')\n@click.option('-c', '--context', required=False, type=str, default=\"\")\ndef code(context):\n</code></pre> <p>Review the other functions and prompts used in this workflow such as testcoverage, performance, security, blockers</p>"},{"location":"tutorials/code-review-cicd-github/#review-github-workflow","title":"Review GitHub workflow","text":"<p>Open the GitHub workflow by opening the file below.</p> <pre><code>cloudshell edit .github/workflows/devai-review.yml \n</code></pre> <p>Review the 5 tasks at the bottom of the file that use the <code>devai</code> python script you reviewed in the previous step. For example the code review step includes <code>devai review code -c [source to review]</code></p>"},{"location":"tutorials/code-review-cicd-github/#execute-a-cicd-job-and-review-genai-output","title":"Execute a CICD job and Review GenAI output","text":"<p>In this step you will commit a change then review the GenAI output in the GitHub logs and summary</p>"},{"location":"tutorials/code-review-cicd-github/#make-changes-and-push-the-commit","title":"Make changes and push the commit","text":"<p>The workflow file needs to be updated to reference your GCP project.</p> <ul> <li> <p>Update 2 instances in the file. Replace project id on lines 8 and 30 with your GCP project id. Example: qwiklabs-gcp-02-71a9948ae110</p> </li> <li> <p>Stage, commit and push your changes to GitHub. The change will enable the workflow to run correctly and pushing to your repo will execute the workflow. </p> </li> </ul>"},{"location":"tutorials/code-review-cicd-github/#review-ai-output-in-cicd","title":"Review AI Output in CICD","text":"<p>With the commit pushed, the workflow will have started executing. You can review the execution and resulting summary in GitHub.</p> <ul> <li>In the browser, Open the GitHub \"Actions\" tab and review the workflow output.</li> <li>When the job completes click on Summary and scroll down to see the AI generated output.</li> </ul>"}]}